# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Global variables
# WinRM configuration for communicating with the guest
WINRM_HOST_PORT = 5895
WINRM_PASSWORD = "FooBarBaz"

# Path to deploy artefacts
PROJ_DIR = "/Users/deluxebrain/Repos/deluxebrain/play-packer-aws-provisioning/MyProject/deploy"

# Relative paths for directories relating to DSC configuration
# Paths are relative to the VagrantFile containing directory
DSC_MODULES_DIR = "dsc/modules/"
DSC_MANIFESTS_DIR = "dsc/manifests/"
DSC_MOF_DIR = "dsc/mof/"
DSC_CONFIG_NAME = "MyWebsite"

# Host setup
HOSTNAME = "webserver01"
# IP address has to be from its own subnet
IP_ADDRESS = "10.0.0.30"

# Guest paths
GUEST_PROJ_DIR = "c:\\vagrant\\"
GUEST_MOF_DIR = GUEST_PROJ_DIR + "DSC\\MOF\\"
GUEST_DEPLOY_DIR = "c:\\inetput\\wwwroot\\"

# Load DSC Module Dependencies
# - Installs Third-Party modules via PowerShellGet
# - Installs the Project's Custom DSC Modules
$dscModDepScript = <<SCRIPT
  Write-Host "Installing Third-Party DSC Modules"
  # Install-Module -Name xWebAdministration -Version 1.3.2.2
    if (Test-Path($Args[0])) {
      Write-Host "Installing Project DSC Modules"
      Copy-Item ($Args[0]) -Destination (\$env:ProgramFiles + "\\WindowsPowerShell\\Modules\\") -Recurse -Container -Force
    }
    Get-DscResource
SCRIPT

# Create MOF folder and set it as current location 
$dscSetupMOF = <<SCRIPT
  if (Test-Path($Args[0]))
  {
    Remove-Item $Args[0] -Recurse -Force
  }
  
  New-Item -ItemType directory -Path $Args[0] | Out-Null
  Set-Location $Args[0] | Out-Null
SCRIPT

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  
  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "sample-app-devbox"
  config.vm.guest = :windows
  config.vm.communicator = "winrm"

  # Create a private network on the specified ip address and hostname
  config.vm.network "private_network", ip: IP_ADDRESS
  # Wont work until get vbox working with router
  # config.vm.network "private_network", type: "dhcp"
  config.vm.hostname = HOSTNAME

  # Configure port forwarding 
  config.vm.network :forwarded_port,   guest: 3389, host: 3399,       id: "rdp",   auto_correct: false
  config.vm.network :forwarded_port,   guest: 5985, host: WINRM_HOST_PORT,  id: "winrm", auto_correct: false
  config.vm.network :forwarded_port,   guest: 80,   host: 8000,       id: "web" # Port forward for IIS
  config.vm.network :forwarded_port,   guest: 443,  host: 8443,       id: "ssl" # Port forward for SSL IIS
  config.vm.network :forwarded_port,   guest: 4018, host: 4018,       id: "remotevsdebug"

  # Configure winrm
  config.winrm.host = "localhost"
  config.winrm.password = WINRM_PASSWORD
  config.winrm.port = WINRM_HOST_PORT
  config.winrm.guest_port = WINRM_HOST_PORT

  # GUI or headless
  config.vm.provider "virtualbox" do |v|
    v.gui = true
  end

  # Use rsync to share the current working directory into the /cygdrive/c/vagrant on the guest machine
  # config.vm.synced_folder '.', 
  #  "c:/vagrant",
  #  type: "rsync",
  #  owner: "vagrant",
  #  rsync__auto: "true",
  #  rsync__exclude: [".git/","*.box", "output-*"]

  # Alternatively use native vbox shares
  # config.vm.synced_folder ".", "c:/vagrant"

  # Setup /etc/hosts ( or hosts.ini ) on guest and host
  # if Vagrant.has_plugin?("vagrant-hostmanager")
  #   config.hostmanager.enabled = true
  #   config.hostmanager.manage_host = false
  #   config.hostmanager.manage_guest = true
  #   config.hostmanager.aliases = %w(example-box.localdomain example-box-alias)
  # end
  
  # Setup MOF directory
  config.vm.provision "shell" do |s|
    s.inline = $dscSetupMOF
    s.args = [GUEST_MOF_DIR]
  end
  
  # Initialize DSC Configuration and Generate MOF file
  config.vm.provision "shell" do |s|
    s.path = "dsc/manifests/MyWebsite.ps1"
    s.args = [
      "localhost",
      "c:\\tmp\\deploy",
      "MyWebsite",
      "c:\\inetput\\wwwroot\\MyWebsite",
      "MyWebsite",
      "com",
      HOSTNAME] 
  end

  # Apply DSC Configuration
  config.vm.provision "shell" do |s|
    s.inline = "Start-DSCConfiguration -Path $Args[0] -Force -Wait -Verbose -Debug"
    s.args = [GUEST_MOF_DIR + DSC_CONFIG_NAME]
  end
end
